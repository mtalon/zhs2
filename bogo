#!/bin/bash
# Bogo version 2
# Written by Michael Talon

VERSION="RC2"

HitBanner()
# Fancy banner to warn user of a hit operation
{
	y=0
	x=$1
	length=${#x}+4
	echo -ne "   "
	while [[ $y -lt $length ]]; do
		echo -ne "*"
		((y++))
	done
	echo -ne "\n"
	echo "     $1"
	y=0
	echo -ne "   "
	while [[ $y -lt $length ]]; do
		echo -ne "*"
		((y++))
	done
	echo -ne "\n"
}

SourceStrain()
# If the file exists in strains directory and has passed first wave
# of sanity checks, source it
{
	if [[ -e $BOGO_STRAINS_DIR/$1 ]]; then
	# [[ ${target_strains[*]} =~ "$1" ]]
		source $BOGO_STRAINS_DIR/$1
		return 0
	fi
	return 1
}

BogoCheckConfig()
# Absolutely disgusting. Kill yourself
{
	local x=0
	if [[ ! -e $ZHS_BASE ]]; then
		Error warn "ZHS_BASE does not exist - check config"
		x=1
	fi
	if [[ ! -e $BOGO_TARGETS_DIR ]]; then
		Error warn "Targets directory does not exist"
		x=1
	elif [[ ! -w $BOGO_TARGETS_DIR ]]; then
		Error warn "Targets directory is not writable"
		echo "         That directory should not be created as root"
		x=1
	else
		for file in $BOGO_TARGETS_DIR; do
			if [[ ! -r $file ]]; then
				Error warn "Target file $file is not readable... dammit hopps!"
			fi
		done
	fi
	
	if [[ ! -e $BOGO_STRAINS_DIR ]]; then
		Error warn "Strains directory does not exist"
		x=1
	elif [[ ! -w $BOGO_STRAINS_DIR ]]; then
		Error warn "Strains directory is not writable"
		x=1
	fi
	
	if [[ $BOGO_ONFAIL != "continue" ]] && [[ $BOGO_ONFAIL != "wait" ]]; then
		Error warn "BOGO_ONFAIL should either be \"continue\" or \"wait\""
		x=1
	fi
	
	if [[ $BOGO_ALLOW_SAVAGE != "true" ]] && [[ $BOGO_ALLOW_SAVAGE != "false" ]]; then
		Error warn "BOGO_ALLOW_SAVAGE should be boolean (\"true\" or \"false\")"
		x=1
	fi
	
	if [[ $BOGO_KILL_ON_SAVAGE != "true" ]] && [[ $BOGO_KILL_ON_SAVAGE != "false" ]]; then
		Error warn "BOGO_KILL_ON_SAVAGE should be boolean (\"true\" or \"false\")"
		x=1
	fi
	
	if [[ ! -e $BOGO_STAGE_DIR/$BOGO_DEFAULT_STAGING ]]; then
		Error warn "Default staging file does not exist or variable is not set"
		x=1
	elif [[ ! -x $BOGO_STAGE_DIR/$BOGO_DEFAULT_STAGING ]]; then
		Error warn "Staging file was not marked as executable. Correcting now"
		chmod +x $BOGO_STAGE_DIR/$BOGO_DEFAULT_STAGING
	fi
	
	if [[ $x == 1 ]]; then
		return 1
	fi
	
	return 0
	
}
StrainBuild()
{
	# Are we building a strain?
	if [[ $1 != *".strain" ]]; then
		return 69
	fi
	
	# Lazily check that the .strain file is actually a strain file
	if [[ $(cat $1) != *"WildeAlias="* ]]; then
		return 69
	fi
	
	
	declare -a ModInclude
	SourceStrain $1
	if [[ $? != 0 ]]; then
		Error warn "Failed to source $1..."
		echo "...wait what the fuck? That shouldn't happen!"
		Bug StrainBuild 133
	fi
	echo "==> $1"
	StrainConfigCheck $1
	if [[ $? != 0 ]]; then
		Msg n 4 "Build failed: errors in config"
		return 1
	fi
	Msg n 4 "Config looks ok"
	AssembleStrain $1
	case $? in
		0)	Msg n 4 "$WildeAlias is READY"
			echo ""
			return 0;;
		1) 	Msg n 4 "Build failed"
			echo ""
			return 3;;
		2)	Msg n 4 "Build skipped"
			echo ""
			return 4;;
		*)	Msg n 4 "AssembleStrain: Bad return...?"
			Bug StrainBuild 158;;
	esac
}

StrainPurgeConfig()
{
	WildeAlias=""
	ModInclude=()
	GoodMod=()
	Payload=""
	RequireStaging=""
	StagingFile=""
}

AssembleStrain()
# Assemble a strain of wilde

{
	if [[ $RequireStaging == "true" ]]; then
		StageStrain $1
		if [[ $? != 0 ]]; then
			Msg err 4 "Staging failed - aborting build"
			return 1
		fi
	fi
	
	if [[ -z $GoodMod ]]; then
		Msg err 4 "Nothing to build"
		Msg n 8 "If you're adding modules outside ZPD, make sure"
		Msg n 8 "you specify the full path to it"
		return 1
	fi
	
	if [[ -e $BOGO_STRAINS_DIR/$WildeAlias ]]; then
		Msg err 4 "$WildeAlias already exists in strains directory"
		echo -ne "    Overwrite? (Y/N) "
		read aa
		if [[ $aa != "Y" ]] && [[ $aa != "y" ]]; then
			return 2
		fi
	fi
	
	# Start to write the final product
	Replace $BOGO_STRAINS_DIR/$WildeAlias
	echo -ne "#!/bin/bash\n" >> $BOGO_STRAINS_DIR/$WildeAlias
	for i in ${GoodMod[@]}; do
		# If file is executable, execute it and pipe its output to final product
		if [[ $(cat $i) == *"#!/"* ]]; then
			if [[ ! -x $i ]]; then
				Msg err 4 "Module ${i##$ZHS_BASE/} is not marked as executable"
				Msg n 8 "Do you want me to correct this?"
				Msg n 8 "If you don't recognize this module, SAY NO and remove it"
				Msg n 8 "from the strain file!"
				echo -ne "        (Y/N) "
				read ab
				if [[ $ab == "Y" ]] || [[ $ab == "y" ]]; then
					chmod +x $i
				else
					return 2
				fi
				if [[ $? != 0 ]]; then
					Msg err 4 "Uh, what the fuck. chmod failed...?"
					Bug AssembleStrain 202
				fi
			fi
			$i >> $BOGO_STRAINS_DIR/$WildeAlias
			if [[ $? != 0 ]]; then
				Msg err 4 "Module failed to execute - aborting build\n"
				return 1
			fi
			
		else
			cat $i >> $BOGO_STRAINS_DIR/$WildeAlias
			echo -ne "\n" >> $BOGO_STRAINS_DIR/$WildeAlias
		fi
		Msg n 4 "Added ${i##$ZHS_BASE/}"
	done		
	
	case $RequireStaging in
		"true")
			if [[ -e $BOGO_STAGE_DIR/$StagingFile ]] && [[ ! -z $StagingFile ]]; then
				Msg n 4 "Using external staging file: $StagingFile"
			else
				Msg err 4 "BUG: staging file missing or empty...?"
				Msg n 8 "What the hell is going on here\n"
				Bug AssembleStrain 225
			fi;;
		"false")
			if [[ -e $BOGO_STAGE_DIR/$BOGO_DEFAULT_STAGING ]] && [[ ! -z $BOGO_DEFAULT_STAGING ]]; then
				Msg n 4 "Using default staging file: $BOGO_DEFAULT_STAGING"
			else
				Msg err 4 "BUG: Default staging is missing...?"
				Msg n 8 "What the hell is going on here\n"
				Bug AssembleStrain 233
			fi
	esac
	
	case $Payload in
		"none")
			chmod +x $BOGO_STRAINS_DIR/$WildeAlias
			Msg n 4 "Marking as executable"
			;;
		"self")
			Msg n 4 "Treating final product as payload"
			;;
		"external")
			if [[ ! -x $PayloadLocation ]]; then
				# We shouldn't end up here
				Msg n 4 "Where the fuck is the payload??"
				Bug AssembleStrain 255
			fi
			;;
	esac
}

StageStrain()
{
	if [[ ! -x $BOGO_STAGE_DIR/$StagingFile ]]; then
		Msg err 4 "Staging file is not marked as executable"
		Msg n 8 "Did you forget to chmod +x?"
		return 1
	fi
	
	# You never know...
	if [[ -e /usr/bin/$1 ]] || [[ -e /bin/$1 ]]; then
		Msg err 4 "Yeah, I'm not about to blindly execute a system binary"
		return 1
	fi
}

StrainConfigCheck()
{
	if [[ -z $WildeAlias ]] || [[ ! $(echo $WildeAlias) ]]; then
		Msg err 4 "You forgot to set WildeAlias!"
		Msg n 8 "Run \"bogo help strains\" for more information"
		return 1
	fi
	
	if [[ -z $WildeIsSavage ]]; then
		Msg err 4 "You forgot to set WildeIsSavage!"
		Msg n 8 "Run \"bogo help strains\" for more information"
		return 2
	elif [[ $WildeIsSavage != "true" ]] && [[ $WildeIsSavage != "false" ]]; then
		Msg err 4 "Expected true/false for WildeIsSavage - assuming true"
		WildeIsSavage="true"
	fi
	
	if [[ $WildeIsSavage == "true" ]]; then
		if [[ $BOGO_ALLOW_SAVAGE != "true" ]]; then
			Msg err 4 "Not allowing savage strain to be built!"
			return 3
		else 
			Msg err 4 "Strain marked as savage - proceeding with caution"
		fi
	fi
	
	if [[ -z $ModInclude ]]; then
		Msg err 4 "You forgot to put modules in ModInclude!"
		Msg n 8 "Run \"bogo help strains\" for more information\n"
		return 4
	fi
	
	if [[ -z $Payload ]]; then
		Msg err 4 "You forgot to set the Payload parameter!"
		Msg n 8 "Run \"bogo help strains\" for more information\n"
		return 5
	fi
	
	if [[ -z $RequireStaging ]]; then
		Msg err 4 "You forgot to set the RequireStaging parameter!"
		Msg n 8 "Run \"bogo help strains\" for more information\n"
		return 6
	fi
	
	if [[ $RequireStaging != "true" ]] && [[ $RequireStaging != "false" ]]; then
		Msg err 4 "RequireStaging needs to be boolean (true or false)\n"
		return 7
	fi
	
	if [[ $Payload != "self" ]] && [[ $Payload != "none" ]] && [[ $Payload != "external" ]]; then
		Msg err 4 "I dont recognize the payload type \"$Payload\""
		Msg n 8 "It should be set to self, none, or external"
		Msg n 8 "Run \"bogo help strains\" or read the readme"
		Msg n 8 "in the strains directory for more info\n"
		return 8
	fi
	
	if [[ $Payload == "external" ]] && [[ -z $PayloadLocation ]]; then
		Msg err 4 "Payload is set to external, yet you haven't given me a path to it!"
		Msg n 8 "Run \"bogo help strains\" for more information.\n"
		return 9
	fi
	
	if [[ $Payload == "external" ]] && [[ ! -e $PayloadLocation ]]; then
		Msg err 4 "External payload location does not exist"
		Msg n 8 "Make sure you give its full path.\n"
		return 10
	fi
	
	if [[ $RequireStaging == "true" ]] && [[ -z $StagingFile ]]; then
		Msg err 4 "You forgot to set the StagingFile parameter!"
		Msg n 8 "It should point to a staging file you want to use from the"
		Msg n 8 "staging directory."
		Msg n 8 "Run \"bogo help strains\" for more information.\n"
		return 11
	fi
	
	if [[ $RequireStaging == "true" ]] && [[ ! -e $StagingFile ]] && [[ ! -e $BOGO_STAGE_DIR/$StagingFile ]]; then
		Msg err 4 "Can't find staging file!"
		Msg n 8 "If its not in the staging directory, then give its absolute path"
		return 12
	fi
	
	local x=0
	for i in ${ModInclude[@]}; do
		if [[ ! -e $ZHS_BASE/$i ]]; then
			Msg n 4 "Ignoring non existant module $i"
		elif [[ ! -r $ZHS_BASE/$i ]]; then
			Msg n 4 "Ignoring unreadable module $i (bad permissions?)"
		else
			GoodMod[$x]=$ZHS_BASE/$i
			((x++))
		fi
	done
	
	return 0
}

ParseStrain()
{
	Banner "Building strains"
	for file in $(ls $BOGO_STRAINS_DIR); do
		cd $BOGO_STRAINS_DIR
		StrainPurgeConfig
		StrainBuild $file
	done
	cd $ZHS_BASE
}

UserListCustom()
{
	local type=$1
	case $type in
		"targets")	list=$BOGO_TARGETS_DIR;;
		"strains")	list=$BOGO_STRAINS_DIR
					type="strain";;
		"hax")	list=$BOGO_HAX_DIR;;
	esac
	
	for file in $list/*; do
		file=${file##$list/}
		if [[ $file == *"$type"* ]]; then
			((count++))
			if [[ -z $2 ]]; then
				echo "$file { "
				while IFS='' read -r line || [[ -n "$line" ]]; do
					echo "   $line"
				done < $list/$file
				echo "}"
			fi
		fi
	done
}

UserList()
{
	case $1 in
		"strains")
			dir1="$BOGO_STRAINS_DIR"
			dir2=strain
			;;
		"targets")
			dir1="$BOGO_TARGETS_DIR"
			dir2=targets
			;;
		"")
			echo "Listing contents of all linked directories"
			echo ""
			dir2=strain
			UserListCustom strains
			echo ""
			dir2=targets
			UserListCustom targets
			return 0
			;;
		*)
			echo "List what? Strains or targets?"
			echo "To list everything, run \"bogo list\" without arguments"
			return 0
			;;
	esac
	
	if [[ ! $(ls $dir1 | grep $dir2) ]]; then
		echo "Theres nothing to list!"
	else
		UserListCustom $1
	fi
}

HelpBrief()
{
	echo ""
	echo "Usage: bogo [ACTION] [ARGUMENT]"
	echo ""
	echo "ACTIONS:"
	echo "   hit all           Hit all targets in target directory"  
	echo "   hit filename      Hit targets named in the file 'filename'"
	echo ""
	echo "   build             Build all stains of wilde in the strains"
	echo "                     directory"
	echo "   build filename    Build only strain 'filename'" 
	echo ""
	echo "   help              Print detailed usage information"
	echo ""
	echo "ZPD:               $ZHS_BASE"
	echo "Target Directory:  $BOGO_TARGETS_DIR"
	echo "Strain Directory:  $BOGO_STRAINS_DIR"
	echo "Staging Directory: $BOGO_STAGE_DIR"
	echo ""
	UserListCustom targets stfu
	if [[ -z $count ]]; then
		echo "No targets in target directory"
	else
		echo "Found $count target file(s)"
	fi
	count=0
	UserListCustom strains stfu
	if [[ -z $count ]]; then
		echo "No strains in strains directory"
	else
		echo "Found $count strain file(s)"
	fi
	echo ""
}

CheckTargetStrain()
{
	if [[ ! -e $BOGO_STRAINS_DIR/$1 ]] && [[ ! -e $1 ]]; then
		Msg err 4 "Can't locate strain \"$1\""
		Msg n 8 "Make sure that it exists in the strains directory, and"
		Msg n 8 "that its full name is specified"	
	else
		target_strains[$num_strains]="$2|$1"
		((num_strains++))
	fi
}

ParseTarget()
# Get target and ally paths from their corresponding files
{
	# Get rid of the trailing path to simplify output
	local potarg=${1##$BOGO_TARGETS_DIR/}
	case $potarg in
		*"targets"*)
			Msg n 4 "Reading $potarg"
			while IFS='' read -r line || [[ -n "$line" ]]; do
				# Read the UseStrain variable
				if [[ $line == "UseStrain="* ]]; then
					eval $line # I don't think this is safe
					if [[ ! ${line##UseStrain=} ]]; then
						# If UseStrain is blank
						Msg err 4 "No strain specified!"
					else
						CheckTargetStrain $UseStrain $potarg
					fi
				elif [[ ! -z $line ]] && [[ ! $line == "" ]]; then
					PathCheck $line
					case $? in
						2)
							Msg err 4 "$line (Exists but is unreadable)"
							((target_nogo++));;
						1)
							Msg err 4 "$line (Does not exist or is inaccessable)"
							((target_nogo++));;
						0)
							Msg lst 4 "$line"
							targets_go[$bad]="$line"
							((bad++));;
						*)
							Msg n 4 "BUG: Bad return...?"
							Bug ParseTarget 518
					esac
					((total_targs++))
				fi
			done < $1
			if [[ -z $UseStrain ]]; then
				Msg err 4 "No strain is associated with this target file"
			fi
			if [[ -z $targets_go ]]; then
				Msg err 4 "No valid targets in this file!"
			fi
			echo "";;
			
		*"allies"*)
			# Contents are used as a whitelist.
			# Include them reguardless if they exist or not in the event
			# path is not available NOW, but could be in the future.
			Msg n 4 "Reading $potarg"
			while IFS='' read -r line || [[ -n "$line" ]]; do
				Msg lst 4 "$line"
				allies_go[$good]="$line"
				((good++))
			done < $1
			echo "";;
		*)
			# Not a valid target or ally file
			return 1;;
	esac
}

Prestage()
{
	#SourceStrain $1
	#if [[ $? != 0 ]]; then
	#	Msg err 4 "BUG: Failed to source strain for $1"
	#	return 1
	#fi
	#Replace $ZHS_BASE/_bogo.tmp
	#if [[ $RequireStaging != true ]]; then
	#	return 1
	#fi
	
	# Very dangerous!
	$BOGO_STAGE_DIR/$1 prestage $WildeAlias $targ &> _bogo.tmp
	local x=$?
	st=$StagingFile
	
	while IFS='' read -r line || [[ -n "$line" ]]; do
		Msg n 4 "[$st] $line"
	done < _bogo.tmp
	
	return $x
}

HitStage()
{
	local targ=$1
	local strain=$2
	SourceStrain $strain
	if [[ $? != 0 ]]; then
		Error warn "Failed to source $strain"
		echo "...wait what the fuck? That shouldn't happen!"
		Bug HitStage 606
	fi

	if [[ $RequireStaging == "true" ]]; then
		Msg n 4 "Executing external staging file"
		if [[ -z $StagingFile ]]; then
			Msg err 4 "Where did our staging file go??"
			Bug HitStage 617
		fi
		$BOGO_STAGE_DIR/$StagingFile stage $WildeAlias $targ &> _bogo.tmp
		x=$?
		st=$StagingFile
	else
		Msg n 4 "Executing default staging file"
		$BOGO_STAGE_DIR/$BOGO_DEFAULT_STAGING stage $WildeAlias $targ 0 &> _bogo.tmp
		x=$?
		st=$BOGO_DEFAULT_STAGING
	fi
	
	# Make the output all cute and shit
	while IFS='' read -r line || [[ -n "$line" ]]; do
		Msg n 4 "[$st] $line"
	done < _bogo.tmp
	echo ""
	
	if [[ $x != 0 ]]; then
		Msg err 4 "STAGING FAILED (returned code $x)"
		return 1
	else
		Msg n 4 "Staging successful"
		return 0
	fi

}

WildeStage()
{
	victim=$1
	
	SourceStrain $victim
	if [[ $RequireStaging == "true" ]]; then
		PathCheck $StagingFile
		if [[ $? != 0 ]]; then
			Error warn "Can't find or read staging file"
			return 1
		fi
	fi
}

UserHit()
{
	good=0
	bad=0
	num_strains=0
	str=0
	target_nogo=0
	total_targs=0
	if [[ -z $1 ]]; then
		echo "What do you want me to hit?"
		return 1
	fi
	
	case $1 in
		"all")
			Banner "Preparing to hit ALL targets in targets.d"
			for file in $BOGO_TARGETS_DIR/*; do
				ParseTarget $file
			done;;
		*)
			if [[ ! -z $1 ]] && [[ ! -e $BOGO_TARGETS_DIR/$1 ]]; then
				Error warn "\"$1\" doesn't exist in targets directory"
				return 1
			fi
			Banner "Preparing to hit targets from $1"
			cd $BOGO_TARGETS_DIR
			ParseTarget $1
			if [[ $? != 0 ]]; then
				echo -ne "\"$1\" is not a valid target file\n"
				return 1
			fi
	esac
	
	if [[ -z $target_strains ]]; then
		echo -ne "Aborting hit operation - "
		# Lazily check if we dont have any strains at all
		# or if we simply don't have any associations
		if [[ ! $(ls $BOGO_STRAINS_DIR | grep .strain) ]]; then
			echo "no valid strains exist in strains directory"
		else
			echo "target(s) do not have a strain associated to them"
		fi
		return 1
	fi
	
	Banner "Building $num_strains strain(s)"
	# For each strain associated with a target
	for i in ${target_strains[@]}; do
		StrainPurgeConfig
		strain=${i#*|}
		cd $BOGO_STRAINS_DIR
		StrainBuild $strain
		local rt=$?
		# If StrainBuild succeeds and payload has been created,
		# mark it "go" and clear the local variables.
		# I'll source the strain again when we hit
		if [[ $rt == 0 ]] || [[ $rt == 1 ]] && [[ -e $WildeAlias ]]; then
			strains_go[$str]="$WildeAlias"
			if [[ -e $BOGO_STAGE_DIR/$StagingFile ]]; then
				staging_go[$str]="$StagingFile"
			fi
			((str++))
		else
			echo -ne "Aborting hit operation - failed to build strain\n"
			return 1
		fi
	done
	
	if [[ $rt == 1 ]]; then
		echo -ne "\nAborting hit operation - failed to build strain\n"
		return 1
	fi
	
	# Building process moves PWD to strains directory to simplify output
	cd $ZHS_BASE
	
	# We should have strains at this point
	if [[ -z $strains_go ]]; then
		echo -ne "Aborting hit operation - no usable strains\n"
		return 1
	fi
	
	if [[ -z $targets_go ]] && [[ ! -z $staging_go ]]; then
		Error warn "There are no accessable targets for me to hit;"
		Msg n 9 "I'll assume this will be corrected during pre-staging."
		Msg n 9 "See \"bogo help staging\" for more information\n"
	elif [[ $target_nogo != 0 ]]; then
		Error note "$target_nogo out of $total_targs target(s) are inaccessable"
		if [[ ! -z $staging_go ]]; then
			Msg n 6 "I'll re-check if I can access these targets after pre-staging."
			Msg n 6 "See \"bogo help staging\" for more information\n"
		else
			echo -ne "\n"
		fi
	fi
	
	# Run prestaging for strains that requested it
	if [[ ! -z $staging_go ]]; then
		Banner "Executing pre-staging for ${#staging_go[@]} strain(s)"
		for i in ${staging_go[@]}; do
			Prestage $i
			case $? in
				0)	Msg n 4 "Pre-staging successful\n";;
				69) Msg n 4 "Pre-staging not needed\n";;
				*)	Msg n 4 "PRE-STAGING FAILED (code $?)\n"
				stage_fail=true;;
			esac 
		done
	elif [[ -z $targets_go ]]; then
		Error warn "There are no accessable targets for me to hit, and their"
		Msg n 9 "associated strain(s) have no pre-staging defined that could"
		Msg n 9 "correct this.\n"
		Msg n 9 "If the target file(s) are not just simply blank," 
		Msg n 9 "then you need to create a staging file that contains a "
		Msg n 9 "script to make those targets visible to me.\n"
		Msg n 9 "Run \"bogo help staging\" for more information\n"
	fi
	
	if [[ $stage_fail == true ]]; then
		echo -ne "Failure reported during pre-staging - aborting operation\n"
		return 1
	fi
	
	# If we dont have targets, but an external pre-stage was executed,
	# check to see if pre-staging made targets available
	if [[ ! -z $staging_go ]] && [[ -z $targets_go ]]; then
		Banner "Rechecking target files"
		num_strains=0
		for file in $BOGO_TARGETS_DIR/*; do
			ParseTarget $file
		done
	fi
	
	Banner "Confirming targets"
	
	# Make sure we still have targets
	if [[ -z $targets_go ]]; then
		Msg err 4 "No targets to hit - aborting operation\n"
		return 1
	fi
	
	# Some sanity checks for the target
	skipped=0 # Be cute and count how many are wrong
	for i in ${targets_go[@]}; do
		ArrayHasValue $i ${allies_go[@]}
		if [[ $? == 0 ]]; then
			Msg err 4 "Target $i is also defined as an ally"
			Msg n 8 "Check your target and ally files for duplicate entries\n"
			((skipped++))
		elif [[ -e $ZHS_BASE/$i ]]; then
			Msg err 4 "Target $i exists in ZPD!"
		elif [[ ! -r $i ]]; then
			Msg err 4 "Target $i is unreadable"
			Msg n 8 "Infection will fail unless this is corrected in staging"
		elif [[ ! -w $i ]]; then
			Msg err 4 "Target $i is unwritable"
			Msg n 8 "Infection will fail unless this is corrected in staging"
		fi
	done
	
	echo -ne "    \\tPath\\t\\tStrain\\t\n"
	local x=1
	local broken=0
	for i in ${targets_go[@]}; do
		echo -ne "    $x\\t"
		echo -ne "$i\\t"
		# Associate targets with a strain
		for j in ${target_strains[@]}; do
			# In the form of "target|strain"
			targ=${j%|*}
			strain=${j#*|}
			# Find out which target file the target came from
			if [[ $(cat $BOGO_TARGETS_DIR/$targ | grep $i) ]]; then
				echo -ne "$strain"
				SourceStrain $strain
				if [[ $? != 0 ]]; then
					# Dont use Msg, this needs to be on the same line
					echo -ne " [!] Where the fuck is the strain file??"
					((broken++))
				elif [[ ! -e $BOGO_STRAINS_DIR/$WildeAlias ]]; then
					echo -ne " [!] BROKEN: Payload not found"
					((broken++))
				fi
			fi
		done
		echo -ne "\n"
		((x++))
	done
	echo -ne "\n"
	if [[ $skipped != 0 ]]; then
		Error warn "There are $skipped conflicting targets."
		return 1
	fi
	
	if [[ $broken != 0 ]]; then
		echo "Aborting hit operation - one or more strains are broken"
		return 1
	fi
	
	Banner "Ready to hit $bad target(s)."
	Msg n 3 "Check that the above output looks sane before continuing."
	Msg n 3 "ONCE THE INFECTION PROCESS STARTS, IT CANNOT BE UNDONE!"
	Msg n 3 "Press ENTER to continue, or CONTROL + C to abort."
	read ab
	
	# Fix this. Oh my god please fix this.
	for i in ${targets_go[@]}; do
		targ=$i
		for j in ${target_strains[@]}; do
			if [[ $(cat $BOGO_TARGETS_DIR/${j%|*} | grep $targ) ]]; then
				strain=${j#*|}
				Banner "ATTEMPTING TO INFECT $targ"
				HitStage $targ $strain
				if [[ $? != 0 ]]; then
					Msg n 4 "INFECTION FAILED\n"
					if [[ $BOGO_ON_FAIL == "abort" ]]; then
						break
					fi
				else
					Msg n 4 "Infection successful\n"
				fi
			fi
		done
	done
	
}

Bug()
{
	echo -ne "\n\nWelp, I totally fucked something up somewhere.\n\n"
	echo "   Faulting method:  $1($2)"
	echo ""
	echo "   num_strains:      $num_strains"
	echo "   str:              $str"
	echo "   target_nogo:      $target_nogo"
	echo "   total_targs:      $total_targs"
	echo ""
	echo "   strain:           $strain"
	echo "   targ:             $targ"
	echo ""
	echo "   stage_fail:       $stage_fail"
	echo ""       
	echo "   targets_go[]:     ${targets_go[*]}"
	echo "   strains_go[]:     ${strains_go[*]}"
	echo "   allies_go[]:      ${allies_go[*]}"
	echo "   target_strains[]: ${target_strains[*]}"
	echo ""
	echo "   WildeAlias:       $WildeAlias"
	echo "   WildeIsSavage:    $WildeIsSavage"
	echo "   ModInclude:       ${ModInclude[*]}"
	echo "   Payload:          $Payload"
	echo "   RequireStaging:   $RequireStaging"
	echo "   StagingFile:      $StagingFile"
	echo ""
	exit 1
}

UserBuild()
{
	if [[ -z $1 ]]; then
		if [[ ! $(ls $BOGO_STRAINS_DIR | grep .strain) ]]; then
			Error warn "There are no strain files in the strains directory"
			return 1
		fi
		ParseStrain
		return 0
	fi
	
	if [[ ! -e $BOGO_STRAINS_DIR/$1 ]]; then
		Error warn "\"$1\" is not a strain file"
		Msg n 9 "If you want to build all strains, run \"bogo build\""
		Msg n 9 "without arguments"
		return 0
	else
		StrainBuild $1
		if [[ $? != 0 ]]; then
			Error warn "StrainBuild failed for $1??"
			Bug UserBuild 936
		fi
	fi
	
	if [[ $? == 69 ]]; then
		Error warn "\"$1\" is not a valid strain of wilde"
		Msg n 9 "Run \"bogo help\" to learn how to create strain files"
	fi
	
}

HelpThorough()
{
	case $1 in
	"strains")
	echo "
   Wilde refers to the payload expected to be executed under my direction.
   Every variation of wilde is referred as a strain, which can be
      - written entirely by the user,
      - 'built' from modules in the directory
      - some combination of the two
   
   Any strain, or script you want me to manage, needs to have a .strain
   file associated to it in the strains directory. Look at example.strain
   for an example.
   This file needs the following fields:
      - WildeAlias=\"string\"
        The name of the final executable
        
      - WildeIsSavage=\"boolean\" (Not totally implemented yet)
        Set to true if the script is expected to cause damage
        
      - WildeIsLeashed=\"boolean\" (Not implemented yet)
        Set to true if you want me or hopps to track and/or limit the
        script's progress
        
      - ModInclude=\"(array)\"
        Give the paths to each componet of wilde relative to the ZPD
        directory, seperating each entry with a space.
        If the componet is a script, I execute it and pipe its output
        to the final product. Otherwise, I simply cat the component's
        contents.
        
      - Payload=\"string\"
        Set to one of the following:
        \"none\"     -> I execute the final executable directly
        \"self\"     -> The final executable is the payload to be exectued
                      by the victim
        \"external\" -> The payload is an external file
        
      - PayloadLocation=\"string\"
        If Payload is set to external, specify the direct path to it
      
      - RequireStaging=\"boolean\"
        If I need to do something fancy to deploy the strain, set this
        to true and create a script for me to execute.
        I refer to this as staging.
        
      - StagingFile=\"string\"
        If this strain requires staging, specify the direct path to
        the staging file you need me to execute
	";;
	"hit")
	echo "
   A TARGET is a user, file, or directory that you want me to infect with
   a strain of wilde.
   
   An ALLY is a user, file, or directory that you DONT want me to infect
   with a strain of wilde.
   
   There are 3 parts to a hit operation: PREP, STAGE, and EXECUTE
   To simplfy the steps involved I've omitted most sanity checks from
   this list.
   
   PREP 
      - Read all ally and target files in the targets directory
      - Check that I can access those targets
      - Check that the strain(s) associated with the target files exist
      - Build those strains
      - Confirm the list of targets to the user
   STAGE
      If the strain has RequireStaging set to true, I'll execute its
      staging file instead. Otherwise...
      - Double check that I can still access the target
      - If Payload is SELF or EXTERNAL, and the target is a directory,
        I place the payload in the target.
   EXECUTE
      - If Payload is NONE, I execute it now
      - If Payload is EXTERNAL, I execute the standalone
	";;
	
	"wilde")
	echo "
   I refer to any payload or script that you want to be executed under my 
   direction as \"wilde\".
";;
	*)
	echo "
   My name is Chief Bogo, and I manage the execution and distribution of
   wilde.
   
   - Create a target file containing a list of users, files, and/or directories 
     you want me to infect with a strain of wilde.
     Somewhere in this file, include the line \"UseStrain=name\", with
     \"name\" being the strain file you want to associate with this list.
     
     This file must be in the form of \"targets_YourNameHere.bogo\",
     with YourNameHere being whatever name you want to call it, and StrainName
     being the strain of wilde you want to infect those targets with.
   
   - If you want me to omit particular users, files, or directories from
     infection, create an ally file containing those items.
     
     This file must be in the form of \"allies_YourNameHere.bogo\"
   
   For more information, run the following:
      bogo help strains -> information on writing and building strains
      bogo help hit     -> information on target selections
";;
	esac
}
if [[ ! -e zpd.subr ]]; then
	echo "zpd.subr is missing."
	echo "It should be the same directory as me"
	exit 99
fi

if [[ ! -e global.cfg ]]; then
	echo "global.cfg is missing."
	echo "It should be the same directory as me"
	exit 99
fi
	
source zpd.subr
SourceGlobal
if [[ $PWD != $ZHS_BASE ]]; then
	cd $ZHS_BASE
fi
Header BOGO2
IAmGroot
if [[ $? == 0 ]]; then
	echo -ne "Running with root credentials\n\n"
fi
BogoCheckConfig
if [[ $? != 0 ]]; then
	echo ""
	Error fatal "Errors in configuration - can't continue"
fi
if [[ -e _bogo.tmp ]] && [[ ! -w _bogo.tmp ]]; then
	rm -f _bogo.tmp
	Error warn "Corrected permissions for scratch file."
	Msg n 9 "Previous execution was probably done as root."
	Msg n 9 "If this was the case, you might run into issues"
	Msg n 9 "with permissions.\n"
fi
Replace _bogo.tmp

case $1 in
	hit) UserHit $2;;
	build) UserBuild $2;;
	list) UserList $2;;
	help) HelpThorough $2;;
	*) echo "Chief Bogo, awaiting orders!"
	   HelpBrief;;
esac
