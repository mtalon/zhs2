#!/bin/bash
# Bogo version 2
# Written by Michael Talon

VERSION="RC4"

HitBanner()
# Fancy banner to warn user of a hit operation
{
	y=0
	x=$1
	length=${#x}+4
	echo -ne "   "
	while [[ $y -lt $length ]]; do
		echo -ne "*"
		((y++))
	done
	echo -ne "\n"
	echo "     $1"
	y=0
	echo -ne "   "
	while [[ $y -lt $length ]]; do
		echo -ne "*"
		((y++))
	done
	echo -ne "\n"
}

Log()
# Log Bogo's actions
{
	# working on it...
	return 0
}

SourceStrain()
# If the file exists in strains directory and has passed first wave
# of sanity checks, source it
{
	if [[ -e $BOGO_STRAINS_DIR/$1 ]]; then
		source $BOGO_STRAINS_DIR/$1
		
		# If StagingFile points to a directory, source all files
		# ending in .strainname
		if [[ -d $StagingFile ]] && [[ -e $BOGO_STRAINS_DIR/$StagingFile ]]; then
			for file in $BOGO_STRAINS_DIR/$StagingFile; do
				if [[ $file == *".$1"* ]]; then
					# Close enough
					source $file
				fi
			done
		fi
		return 0
	fi
	return 1
}

BogoCheckConfig()
# Gross brute force check of bogo's config
{
	local x=0
	if [[ ! -e $ZHS_BASE ]]; then
		Error warn "ZHS_BASE does not exist - check config"
		x=1
	fi
	if [[ ! -e $BOGO_TARGETS_DIR ]]; then
		Error warn "Targets directory does not exist"
		x=1
	elif [[ ! -w $BOGO_TARGETS_DIR ]]; then
		Error warn "I cannot write to the targets directory"
		Msg n 9 "Was it created as root?"
		x=1
	else
		for file in $BOGO_TARGETS_DIR; do
			if [[ ! -r $file ]]; then
				Error warn "Target file $file is not readable... dammit hopps!"
			fi
		done
	fi
	
	if [[ ! -e $BOGO_STRAINS_DIR ]]; then
		Error warn "Strains directory does not exist"
		x=1
	elif [[ ! -w $BOGO_STRAINS_DIR ]]; then
		Error warn "Strains directory is not writable"
		x=1
	fi
	
	if [[ $BOGO_ONFAIL != "continue" ]] && [[ $BOGO_ONFAIL != "wait" ]]; then
		Error warn "BOGO_ONFAIL should either be \"continue\" or \"wait\""
		x=1
	fi
	
	if [[ $BOGO_ALLOW_SAVAGE != "true" ]] && [[ $BOGO_ALLOW_SAVAGE != "false" ]]; then
		Error warn "BOGO_ALLOW_SAVAGE should be boolean (\"true\" or \"false\")"
		x=1
	fi
	
	if [[ ! -e $BOGO_STAGING_DIR/$BOGO_DEFAULT_STAGING ]]; then
		Error warn "Default staging file does not exist or variable is not set"
		x=1
	elif [[ ! -x $BOGO_STAGING_DIR/$BOGO_DEFAULT_STAGING ]]; then
		Error warn "Default staging file was not marked as executable. Correcting now"
		chmod +x $BOGO_STAGING_DIR/$BOGO_DEFAULT_STAGING
	fi
	
	if [[ -z $BOGO_STRAINS_ARCHIVE_TYPE ]]; then
		Error warn "BOGO_STRAINS_ARCHIVE_TYPE is not set"
	fi
	
	case $BOGO_STRAINS_ARCHIVE_TYPE in
		"zip")
			if [[ ! -e /bin/zip ]]; then
				Error warn "zip is not installed"
				Msg n 9 "I will not be able to extract strain archives\n"
				disable_archive=true
			fi
			;;
		"7z")
			if [[ ! -e /bin/7z ]]; then
				Error warn "7z is not installed"
				Msg n 9 "I will not be able to extract strain archives\n"
				disable_archive=true
			fi
			;;
		"tar")
			if [[ ! -e /bin/tar ]]; then
				Error warn "tar is not installed"
				Msg n 9 "I will not be able to extract strain archives\n"
				disable_archive=true
			fi
			;;
		*)
			Error warn "I dont recognize the strain archive type \"$BOGO_STRAINS_ARCHIVE_TYPE\""
			Msg n 9 "Check your config. I will not be able to extract\n"
			disable_archive=true
			;;
	esac
	
	if [[ $x == 1 ]]; then
		return 1
	fi
	
	return 0
	
}
StrainBuild()
{
	# Are we building a strain?
	if [[ $1 != *".strain" ]]; then
		return 69
	fi
	
	# Lazily check that the .strain file is actually a strain file
	if [[ $(cat $1) != *"StrainInclude="* ]]; then
		return 69
	fi
	
	declare -a ModInclude
	SourceStrain $1
	if [[ $? != 0 ]]; then
		Error warn "Failed to source $1..."
		echo "...wait what the fuck? That shouldn't happen!"
		Bug StrainBuild 133
	fi
	Msg n 3 "> $1"
	StrainConfigCheck $1
	if [[ $? != 0 ]]; then
		Msg n 4 "Build failed: errors in config"
		return 1
	fi
	Msg n 5 "Config looks ok"
	AssembleStrain $1
	case $? in
		0)	Msg n 3 "> $StrainAlias is READY"
			echo ""
			return 0;;
		1) 	Msg n 3 "> Build failed"
			echo ""
			return 3;;
		2)	Msg n 3 "> Build skipped"
			echo ""
			return 4;;
		*)	Msg n 3 "> BUG: AssembleStrain: Bad return...?"
			Bug StrainBuild 158;;
	esac
}

StrainPurgeConfig()
{
	ModInclude=()
	GoodMod=()
	Payload=""
	StagingFile=""
}

AssembleStrain()
# Assemble a strain
{	
	if [[ -z $GoodMod ]]; then
		Msg err 4 "Nothing to build"
		Msg n 8 "If you're adding modules outside ZPD, make sure"
		Msg n 8 "you specify the full path to it"
		return 1
	fi
	
	if [[ -z $StrainAlias ]]; then
		Msg err 4 "BUG: Alias blank - why was this not checked!?"
		Bug AssembleStrain 190
	fi
	
	if [[ -e $BOGO_STRAINS_DIR/$StrainAlias ]]; then
		Msg err 4 "$StrainAlias already exists in strains directory"
		echo -ne "        Overwrite? (Y/N) "
		read aa
		if [[ $aa != "Y" ]] && [[ $aa != "y" ]]; then
			return 2
		fi
	fi
	
	# Start to write the final product
	Replace $BOGO_STRAINS_DIR/$StrainAlias
	echo -ne "#!/bin/bash\n" >> $BOGO_STRAINS_DIR/$StrainAlias
	for i in ${GoodMod[@]}; do
		# If file is executable, execute it and pipe its output to final product
		if [[ $(cat $i) == *"#!/"* ]]; then
			if [[ ! -x $i ]]; then
				Msg err 4 "Module ${i##$ZHS_BASE/} is not marked as executable"
				Msg n 8 "Do you want me to correct this?"
				Msg n 8 "If you don't recognize this module, SAY NO and remove it"
				Msg n 8 "from the strain file!"
				echo -ne "        (Y/N) "
				read ab
				if [[ $ab == "Y" ]] || [[ $ab == "y" ]]; then
					chmod +x $i
				else
					return 2
				fi
				if [[ $? != 0 ]]; then
					Msg err 4 "Uh, what the fuck. chmod failed?"
					Bug AssembleStrain 202
				fi
			fi
			$i >> $BOGO_STRAINS_DIR/$StrainAlias
			if [[ $? != 0 ]]; then
				Msg err 4 "Module failed to execute - aborting build\n"
				return 1
			fi
			
		else
			cat $i >> $BOGO_STRAINS_DIR/$StrainAlias
			echo -ne "\n" >> $BOGO_STRAINS_DIR/$StrainAlias
		fi
		Msg n 5 "Added ${i##$ZHS_BASE/}"
	done		
	
	if [[ ! -z $PrestageFile ]]; then
		if [[ ! -e $BOGO_STAGING_DIR/$PrestageFile ]]; then
			# Should of been checked
			Msg err 4 "BUG: I've lost the prestage file??"
			Bug AssembleStrain 261
		else
			if [[ $PrestageFile == $StagingFile ]]; then
				Msg err 4 "Prestage file is the same as the staging file"
				Msg n 8 "I will assume this was intentional."
			fi
			if [[ ! -x $BOGO_STAGING_DIR/$PrestageFile ]]; then
				Msg err 4 "Prestage file not marked as executable"
				Msg n 8 "Correcting now"
				chmod +x $BOGO_STAGING_DIR/$PrestageFile
			fi
			prestage_go[$str]=$PrestageFile
		fi
	fi
	
	case $Payload in
		"none")
			chmod +x $BOGO_STRAINS_DIR/$StrainAlias
			Msg n 5 "Marking as executable"
			;;
		"self")
			Msg n 5 "Treating final product as payload"
			;;
		"external")
			if [[ ! -x $PayloadLocation ]]; then
				# We shouldn't end up here
				Msg n 4 "Where the fuck is the payload??"
				Bug AssembleStrain 255
			fi
			;;
	esac
	
	if [[ ! -z $ExecuteOnFail ]]; then
		if [[ ! -e $ZHS_BASE/$ExecuteOnFail ]]; then
			Msg err 4 "Script to run on failure does not exist"
			return 2
		fi
		
		if [[ ! -x $ZHS_BASE/$ExecuteOnFail ]]; then
			Msg err 4 "Script to run on failure was not marked as executable"
			Msg n 8 "Correcting now"
			chmod +x $ZHS_BASE/$ExecuteOnFail
		fi
	fi
	
	if [[ ! -z $ExecuteOnSuccess ]]; then
		if [[ ! -e $ZHS_BASE/$ExecuteOnSuccess ]]; then
			Msg err 4 "Script to run on success does not exist"
			return 2
		fi
		
		if [[ ! -x $ZHS_BASE/$ExecuteOnSuccess ]]; then
			Msg err 4 "Script to run on success was not marked as executable"
			Msg n 8 "Correcting now"
			chmod +x $ZHS_BASE/$ExecuteOnSuccess
		fi
	fi
}

StageStrain()
{
	if [[ ! -x $BOGO_STAGING_DIR/$StagingFile ]]; then
		Msg err 4 "Staging file is not marked as executable"
		Msg n 8 "Did you forget to chmod +x?"
		return 1
	fi
	
	# You never know...
	if [[ -e /usr/bin/$1 ]] || [[ -e /bin/$1 ]]; then
		Msg err 4 "Yeah, I'm not about to blindly execute a system binary"
		return 1
	fi
}

StrainConfigCheck()
# Make the user aware of how Bogo interprets the strain
# Error out if there are mistakes
{
	if [[ $StrainIsSavage == "true" ]]; then
		if [[ $BOGO_ALLOW_SAVAGE != "true" ]]; then
			Msg err 5 "Not allowing savage strain to be built"
			return 1
		else
			Msg n 5 "Strain marked as savage"
		fi
	fi
	
	if [[ $LaunchTheMissileNow == "true" ]]; then
		Msg err 5 "EXECUTING STRAIN IMMEDIATELY AFTER BUILD COMPLETES"
	fi
	
	if [[ $SkipStaging == "true" ]]; then
		Msg n 5 "Staging will be skipped"
	fi
	
	if [[ ! -z $PrestageFile ]]; then
		if [[ ! -e $BOGO_STAGING_DIR/$PrestageFile ]]; then
			Msg err 5 "Prestage file does not exist"
		elif [[ -d $PrestageFile ]]; then
			local psnum=0
			Msg n 5 "Reading contents of $PrestageFile"
			for file in $PrestageFile; do
				if [[ $file == *".stage" ]]; then
					prestage_bulk[$psnum]=$file
					((psnum++))
				fi
			done
			if [[ $psnum != 0 ]]; then
				Msg n "$psnum file(s) will be executed for prestaging"
			else
				Msg err 4 "No valid staging files found in this directory"
				Msg n 8 "Remember, I ignore any file that doesn't end in \".stage\"."
			fi
		else
			Msg n 5 "Prestaging. . . . . $PrestageFile"
		fi
	fi
	
	if [[ -z $StrainInclude ]]; then
		Msg err 4 "You forgot to put modules in StrainInclude!"
		Msg n 8 "Run \"bogo help strains\" for more information\n"
		return 4
	fi
	
	if [[ -z $Payload ]]; then
		Msg err 4 "You forgot to set the Payload parameter!"
		Msg n 8 "Run \"bogo help strains\" for more information\n"
		return 5
	fi
	
	if [[ $Payload != "self" ]] && [[ $Payload != "none" ]] && [[ $Payload != "external" ]]; then
		Msg err 4 "I dont recognize the payload type \"$Payload\""
		Msg n 8 "It should be set to self, none, or external"
		Msg n 8 "Run \"bogo help strains\" or read the readme"
		Msg n 8 "in the strains directory for more info\n"
		return 8
	fi
	
	if [[ $Payload == "external" ]] && [[ -z $PayloadLocation ]]; then
		Msg err 4 "Payload is set to external, yet you haven't given me a path to it!"
		Msg n 8 "Run \"bogo help strains\" for more information.\n"
		return 9
	fi
	
	if [[ $Payload == "external" ]] && [[ ! -e $PayloadLocation ]]; then
		Msg err 4 "External payload location does not exist"
		Msg n 8 "Make sure you give its full path.\n"
		return 10
	fi
	
	if [[ -z $StagingFile ]]; then
		Msg err 4 "StagingFile is not defined."
		Msg n 8 "If the strain is so simple that you don't need staging,"
		Msg n 8 "or if you want to use the default staging file, specify"
		Msg n 8 "\"default\"."
		return 11
	else
		Msg n 5 "Staging . . . . . . $StagingFile"
	fi
	
	if [[ ! -e $BOGO_STAGING_DIR/$StagingFile ]]; then
		Msg err 4 "I cant find the staging file."
		Msg n 8 "Does it exist in the staging directory?"
		return 12
	fi
	
	if [[ ! -z $ExecuteOnFail ]] && [[ ! -e $ZHS_BASE/$ExecuteOnFail ]]; then
		Msg err 4 "I can't find ExecuteOnFail's script"
		Msg n 8 "Make sure the path is relative to ZPD"
		return 13
	elif [[ ! -z $ExecuteOnFail ]]; then
		Msg n 5 "Execute on failure  $ExecuteOnFail"
	fi
	
	if [[ ! -z $ExecuteOnSuccess ]] && [[ ! -e $ZHS_BASE/$ExecuteOnSuccess ]]; then
		Msg err 4 "I can't find ExecuteOnSuccess' script"
		Msg n 8 "Make sure the path is relative to ZPD"
		return 14
	elif [[ ! -z $ExecuteOnSuccess ]]; then 
		Msg n 5 "Execute on success  $ExecuteOnSuccess"
	fi
	
	local x=0
	for i in ${StrainInclude[@]}; do
		if [[ ! -e $ZHS_BASE/$i ]]; then
			Msg n 4 "Ignoring non existant module $i"
		elif [[ ! -r $ZHS_BASE/$i ]]; then
			Msg n 4 "Ignoring unreadable module $i (bad permissions?)"
		else
			GoodMod[$x]=$ZHS_BASE/$i
			((x++))
		fi
	done
	
	# If StrainAlias is not defined, then set the alias to
	# the name of the strain file (minus .strain of course)
	if [[ -z $StrainAlias ]]; then
		StrainAlias=${1%%.strain}
	fi
	
	return 0
}

MoveStrainFile()
{
	case $1 in
		*"targets_"*)
			mv $1 $ZHS_BASE/$BOGO_TARGETS_DIR;;
		*".strain")
			mv $1 $ZHS_BASE/$BOGO_STRAINS_DIR;;
		*)
			Msg err 4 "BUG: Invalid file $1"
			Bug MoveStrainFile 473;;
	esac
}

ExtractStrainArchive()
{
	local cmd="Bug ExtractStrainArchive 438"
	if [[ $disable_archive == true ]]; then
		Msg err 4 "Archive support disabled - check config"
	else
	if [[ $BOGO_STRAINS_ARCHIVE_TYPE == "7z" ]]; then
		Msg n 4 "Brace yourself for a wall of text from 7z!"
		sleep 1
	fi
		case $1 in
			*".zip")	cmd="unzip -oqq $1 -d $1.arch";;
			*".7z")		cmd="7z e $1 $1.arch./";;
			*".tar")	cmd="tar xvf $1 $1.arch";;
		esac
		$cmd
		if [[ $? != 0 ]] || [[ ! -e $1.arch ]]; then
			Msg err 4 "Extraction failed\n"
			return 1
		fi
		for file in "$1.arch/*"; do
			MoveStrainFile $file
		done
		rm -rf $1.arch
		Msg n 4 "Extraction successful\n"
	fi
}

ParseStrain()
{
	Banner "Building strains"
	for file in $(ls $BOGO_STRAINS_DIR); do
		cd $BOGO_STRAINS_DIR
		if [[ $file == *".$BOGO_STRAINS_ARCHIVE_TYPE" ]]; then
			Msg n 4 "Extracting $file"
			ExtractStrainArchive $file
		fi
		StrainPurgeConfig
		StrainBuild $file
	done
	cd $ZHS_BASE
}

UserListCustom()
{
	local type=$1
	case $type in
		"targets")	list=$BOGO_TARGETS_DIR;;
		"strains")	list=$BOGO_STRAINS_DIR
					type="strain";;
		"hax")	list=$BOGO_HAX_DIR;;
	esac
	
	for file in $list/*; do
		file=${file##$list/}
		if [[ $file == *"$type"* ]]; then
			((count++))
			if [[ -z $2 ]]; then
				echo "$file { "
				while IFS='' read -r line || [[ -n "$line" ]]; do
					echo "   $line"
				done < $list/$file
				echo "}"
			fi
		fi
	done
}

UserList()
{
	case $1 in
		"strains")
			echo -ne "Listing strain config files\n\n"
			dir1="$BOGO_STRAINS_DIR"
			dir2=strain
			;;
		"targets")
			echo -ne "Listing target files and their contents\n\n"
			dir1="$BOGO_TARGETS_DIR"
			dir2=targets
			;;
		"all")
			echo -ne "Listing contents of all linked directories\n\n"
			echo ""
			dir2=strain
			UserListCustom strains
			echo ""
			dir2=targets
			UserListCustom targets
			return 0
			;;
		*)
			echo -ne "List what?\n\n"
			echo "Targets?    -> bogo list targets"
			echo "Strains?    -> bogo list strains"
			echo -ne "Everything? -> bogo list all\n\n"
			return 0
			;;
	esac
	
	if [[ ! $(ls $dir1 | grep $dir2) ]]; then
		echo "Theres nothing to list!"
	else
		UserListCustom $1
	fi
}

UserEdit()
{
	if [[ -z $1 ]]; then
		echo -ne "Edit what?\n"
		echo "Heres the syntax: bogo edit name.strain Parameter Value"
		echo ""
		echo "name.strain -> the strain file you want me to edit"
		echo "Paramater   -> the variable you want to change"
		echo "Value       -> what you want to set it to"
		return 1
	fi
	
	if [[ -z $2 ]]; then
		echo -ne "What paramater do you want to set?\n"
		return 1
	fi
	
	if [[ "$2" == *"="* ]]; then
		echo -ne "Don't include the equals sign. Separate it with a space\n"
		return 1
	fi
	
	if [[ -z $3 ]]; then
		echo -ne "What do you want to set $2 to?\n"
		return 1
	fi
	
	if [[ ! -e $BOGO_STRAINS_DIR/$1 ]]; then
		echo "I can't find that in the strains directory"
		if [[ $1 != *".strain" ]]; then
			echo "Did you mean to say $1.strain?"
		fi
		return 2
	fi
	
	if [[ $(cat $BOGO_STRAINS_DIR/$1) == *"$2"* ]]; then
		FindAndReplace $BOGO_STRAINS_DIR/$1 $2 "$2=$3"
		local ch=1
	else
		echo "$2=$3" >> $BOGO_STRAINS_DIR/$1
		local ch=1
	fi
	
	if [[ $ch == 1 ]]; then
		echo -ne "Changes applied to $1:\n\n"
		while read a; do
			if [[ $a == "$2=$3" ]]; then
				echo "--> $a"
			else
				Msg n 4 "$a"
			fi
		done < $BOGO_STRAINS_DIR/$1
	fi
	echo ""
}

HelpBrief()
{
	echo ""
	echo "Usage: bogo [action]"
	echo "Actions:"
	echo "   hit          Infect targets with a strain"
	echo "   build        Build strains without infecting"
	echo "   list         List contents of our directories"
	echo "   help         Print detailed usage information"
	echo "   edit         Change parameters of a strain"
	echo "   check        Check the syntax of strains and targets"
	echo  ""
	echo "ZPD                $ZHS_BASE"
	echo "Targets directory  $BOGO_TARGETS_DIR"
	echo "Strains directory  $BOGO_STRAINS_DIR"
	echo "Staging directory  $BOGO_STAGING_DIR"
	echo ""
	count=0
	UserListCustom targets stfu
	if [[ ! -z $count ]]; then
		echo "Found $count target file(s)"
	else
		echo "No target files found"
	fi
	count=0
	UserListCustom strains stfu
	if [[ ! -z $count ]]; then
		echo "Found $count strain file(s)"
	else
		echo "No strains found"
	fi
	echo ""
}

CheckTargetStrain()
{
	if [[ ! -e $BOGO_STRAINS_DIR/$1 ]] && [[ ! -e $1 ]]; then
		Msg err 4 "Can't locate strain \"$1\""
		Msg n 8 "Make sure that it exists in the strains directory, and"
		Msg n 8 "that its full name is specified"	
	else
		if [[ ! ${target_strains[*]} == *"$UseStrain"* ]]; then	
			unbuilt_strains[$num_strains]="$2|$1"
			((num_strains++))
		fi
	fi
}

TargetPathCheck()
{
	if [[ $1 =~ "|" ]]; then
		return 4
	elif [[ ! -e $1 ]]; then
		return 1
	elif [[ ! -r $1 ]]; then
		return 2
	elif [[ ! -w $1 ]]; then
		return 3
	fi
	
}

ParseTargetFile()
# Get target and ally paths from their corresponding files
{
	# Get rid of the trailing path to simplify output
	local potarg=${1##$BOGO_TARGETS_DIR/}
	local x1=0
	local y1=0
	case $potarg in
		*"targets"*)
			Msg n 3 "> $potarg"
			while IFS='' read -r line || [[ -n "$line" ]]; do
				# Read the UseStrain variable
				if [[ $line == "UseStrain="* ]]; then
					eval $line # I don't think this is safe
					if [[ ! ${line##UseStrain=} ]]; then
						# If UseStrain is blank
						Msg err 4 "No strain specified!"
					else
						CheckTargetStrain $UseStrain $potarg
					fi
				elif [[ ! -z $line ]] && [[ $line != " " ]]; then
					ArrayHasValue "$line" "${targets_go[@]}"
					if [[ $? == 0 ]]; then
						Msg err 4 "$line (Duplicate: ignoring)"
					else
						TargetPathCheck $line
						case $? in
							4)	# Dont suppress output, this is bad
								Msg err 4 "$line (Bad character in name)"
								((target_nogo++));;
							3)
								if [[ $BOGO_SUPPRESS_OUTPUT != "true" ]]; then
									Msg err 4 "$line (Exists but is unwritable)"
								fi
								((target_nogo++));;
							2)
								if [[ $BOGO_SUPPRESS_OUTPUT != "true" ]]; then
									Msg err 4 "$line (Exists but is unreadable)"
								fi
								((target_nogo++));;
							1)
								if [[ $BOGO_SUPPRESS_OUTPUT != "true" ]]; then
									Msg err 4 "$line (Does not exist or is inaccessible)"
								fi
								((target_nogo++));;
							0)
								if [[ $BOGO_SUPPRESS_OUTPUT != "true" ]]; then
									Msg lst 4 "$line"
								fi
								targets_go[$bad]="$line"
								((bad++))
								((y1++));;
							*)
								Msg n 4 "BUG: Bad return...?"
								Bug ParseTargetFile 518;;
						esac
						target_strains[$total_targs]="$potarg|$UseStrain"
						((total_targs++))
						((x1++))
					fi
				fi
			done < $1
			if [[ -z $UseStrain ]]; then
				Msg err 4 "No strain is associated with this target file"
			fi
			if [[ -z $targets_go ]] || [[ $y1 -eq 0 ]]; then
				Msg n 3 "> No valid or accessible targets"
			else
				case $y1 in
					1)
						Msg n 3 "> Target accessible";;
					2)
						Msg n 3 "> Both targets accessible";;
					*)
						if [[ $y1 -eq $x1 ]]; then
							Msg n 3 "> All targets accessible"
						else
							Msg n 3 "> $y1 of $x1 targets accessible"
						fi;;
				esac
			fi
			echo "";;
			
		*"allies"*)
			# Contents are used as a whitelist.
			# Include them reguardless if they exist or not in the event
			# path is not available NOW, but could be in the future.
			Msg n 4 "Reading $potarg"
			while IFS='' read -r line || [[ -n "$line" ]]; do
				Msg lst 4 "$line"
				allies_go[$good]="$line"
				((good++))
			done < $1
			echo "";;
		*)
			# Not a valid target or ally file
			return 1;;
	esac
}

Prestage()
{
	if [[ ! -e $BOGO_STAGING_DIR/$1 ]]; then
		Msg err 4 "BUG: Prestage file missing!?"
		Bug Prestage 739
	fi
	
	if [[ ! -z $PrestageArgs ]]; then
		$BOGO_STAGING_DIR/$1 $PrestageArgs &> _bogo.tmp
	else
		$BOGO_STAGING_DIR/$1 &> _bogo.tmp
	fi
	
	local x=$?
	st=$1
	while IFS='' read -r line || [[ -n "$line" ]]; do
		Msg n 4 "[$st] $line"
	done < _bogo.tmp
	
	return $x
}

HitStage()
{
	local targ=$1
	local strain=$2
	local fail=false
	
	SourceStrain $strain
	if [[ $? != 0 ]]; then
		Msg err 4 "Failed to source $strain"
		Msg n 4 "...wait what the fuck? That shouldn't happen!"
		Bug HitStage 606
	fi	
	if [[ ! -e $targ ]]; then
		Msg err 4 "Target not accessible!"
		fail=true
	fi
	
	if [[ ! -r $targ ]]; then
		Msg err 4 "Can't read target!"
		fail=true
	fi
	
	if [[ ! -w $targ ]]; then
		Msg err 4 "Can't write to target!"
		fail=true
	fi
	
	if [[ $fail == true ]]; then
			case $BOGO_ONFAIL in
				"continue")
					return 1;;
				"abort")
					return 2;;
				"ignore")
					break;;
				*)
					Msg err 4 "BUG: BOGO_ONFAIL set to $BOGO_ONFAIL?"
					Msg n 4 "Why was this not checked??"
					return 2;;
			esac
	fi
	
	
	case $Payload in
		"none")
			Msg n 4 "Executing payload"
			$BOGO_STRAINS_DIR/$StrainAlias &> _bogo.tmp
			x=$?
			;;
		"self")
			if [[ $SkipStaging != "true" ]]; then 
				Msg n 4 "Executing external staging file"
				if [[ -z $StagingFile ]]; then
					Msg err 4 "BUG: Where did our staging file go??"
					Bug HitStage 617
				fi
				
				# If we have extra arguments, add them 
				if [[ ! -z $StagingArgs ]]; then
					$BOGO_STAGING_DIR/$StagingFile $StagingArgs &> _bogo.tmp
				else
					$BOGO_STAGING_DIR/$StagingFile &> _bogo.tmp
				fi
				x=$?
			else
				Msg n 4 "Skipping staging as requested"
			fi 
			;;
		*)
			Msg err 4 "BUG: Payload makes no sense: $Payload"
			Bug HitStage 741
			;;
	esac
		
	# Make the output all cute and shit
	while IFS='' read -r line || [[ -n "$line" ]]; do
		Msg n 4 "[$strain] $line"
	done < _bogo.tmp
	echo ""
	
	if [[ $x != 0 ]]; then
		Msg err 4 "STAGING FAILED (returned code $x)"
		if [[ ! -z $ExecuteOnFail ]]; then
			if [[ ! -e $ExecuteOnFail ]]; then
				Msg err 4 "BUG: ExecuteOnFail Missing??"
				Bug HitStage 720
			else
				Msg n 4 "Executing post-failure script"
				$ExecuteOnFail &> _bogo.tmp
				while IFS='' read -r line || [[ -n "$line" ]]; do
					Msg n 4 "> $line"
				done < _bogo.tmp
			fi
		fi
		return 1
	else
		Msg n 4 "Staging successful"
		if [[ ! -z $ExecuteOnSuccess ]]; then
			if [[ ! -e $ExecuteOnSuccess ]]; then
				Msg err 4 "BUG: ExecuteOnSuccess Missing??"
				Bug HitStage 731
			else
				Msg n 4 "Executing post-success script"
				$ExecuteOnSuccess &> _bogo.tmp
				while IFS='' read -r line || [[ -n "$line" ]]; do
					Msg n 4 "> $line"
				done < _bogo.tmp
			fi
		fi
		return 0
	fi

}

WildeStage()
{
	victim=$1
	
	SourceStrain $victim
	if [[ $RequireStaging == "true" ]]; then
		PathCheck $StagingFile
		if [[ $? != 0 ]]; then
			Error warn "Can't find or read staging file"
			return 1
		fi
	fi
}

UserHit()
{
	good=0
	bad=0
	num_strains=0
	str=0
	target_nogo=0
	total_targs=0
	if [[ -z $1 ]]; then
		echo "What do you want me to hit?"
		echo "To hit all targets, run \"bogo hit all\""
		echo "To hit only targets in a single target file, run \"bogo hit name\""
		return 1
	fi
	
	case $1 in
		"all")
			Banner "Preparing to hit ALL targets in targets.d"
			for file in $BOGO_TARGETS_DIR/*; do
				ParseTargetFile $file
			done;;
		*)
			if [[ ! -z $1 ]] && [[ ! -e $BOGO_TARGETS_DIR/$1 ]]; then
				Error warn "\"$1\" doesn't exist in targets directory"
				return 1
			fi
			Banner "Preparing to hit targets from $1"
			cd $BOGO_TARGETS_DIR
			ParseTargetFile $1
			if [[ $? != 0 ]]; then
				echo -ne "\"$1\" is not a valid target file\n"
				return 1
			fi
	esac
	
	if [[ $total_targs -eq 0 ]]; then
		echo -ne "\nThere are no target files in target directory!\n"
		return 1
	fi
	
	if [[ -z $target_strains ]]; then
		echo -ne "Aborting hit operation - "
		# Lazily check if we dont have any strains at all
		# or if we simply don't have any associations
		if [[ ! $(ls $BOGO_STRAINS_DIR | grep .strain) ]]; then
			echo "no valid strains exist in strains directory"
		else
			echo "target(s) do not have a strain associated to them"
		fi
		return 1
	fi
	
	Banner "Building $num_strains strain(s)"
	
	# We should have something here
	if [[ -z ${target_strains[@]} ]]; then
		Msg err 4 "BUG: target_strains is blank!?"
		Bug UserHit 877
	fi
	 
	# For each strain associated with a target
	for i in ${unbuilt_strains[@]}; do
		StrainPurgeConfig
		strain=${i#*|}
		cd $BOGO_STRAINS_DIR
		StrainBuild $strain
		local rt=$?
		# If StrainBuild succeeds and payload has been created,
		# mark it "go" and clear the local variables.
		# I'll source the strain again when we hit
		if [[ $rt == 0 ]] || [[ $rt == 1 ]] && [[ ! -z $StrainAlias ]] && [[ -e $StrainAlias ]]; then
			strains_go[$str]="$StrainAlias"
			if [[ -e $BOGO_STAGING_DIR/$StagingFile ]]; then
				staging_go[$str]="$StagingFile"
			fi
			((str++))
		else
			echo -ne "Aborting hit operation - failed to build strain\n"
			return 1
		fi
	done
	
	if [[ $rt == 1 ]]; then
    	echo -ne "\nAborting hit operation - failed to build strain\n"
		return 1
	fi
	
	# Building process moves PWD to strains directory to simplify output
	cd $ZHS_BASE
	
	# We should have strains at this point
	if [[ -z $strains_go ]]; then
		echo -ne "Aborting hit operation - no usable strains\n"
		return 1
	fi
	
	if [[ -z $targets_go ]] && [[ ! -z $staging_go ]]; then
		Error warn "There are no accessible targets for me to hit;"
		Msg n 9 "I'll assume this will be corrected during pre-staging."
		Msg n 9 "See \"bogo help staging\" for more information\n"
		flag_recheck=true
	elif [[ $target_nogo != 0 ]]; then
		Error note "$target_nogo out of $total_targs target(s) are inaccessible"
		if [[ ! -z $staging_go ]]; then
			Msg n 6 "I'll re-check if I can access these targets after pre-staging."
			Msg n 6 "See \"bogo help staging\" for more information\n"
		else
			echo -ne "\n"
		fi
		flag_recheck=true
	fi
	
	# Run prestaging for strains that requested it
	if [[ ! -z $prestage_go ]]; then
		Banner "Executing pre-staging for ${#staging_go[@]} strain(s)"
		for i in ${prestage_go[@]}; do
			Prestage $i
			case $? in
				0)	Msg n 4 "Pre-staging successful\n";;
				*)	Msg n 4 "PRE-STAGING FAILED (code $?)\n"
				stage_fail=true;;
			esac 
		done
	elif [[ -z $targets_go ]]; then
		Error warn "There are no accessible targets for me to hit, and their"
		Msg n 9 "associated strain(s) have no pre-staging defined that could"
		Msg n 9 "correct this.\n"
		Msg n 9 "If the target file(s) are not just simply blank," 
		Msg n 9 "then you need to create a staging file that contains a "
		Msg n 9 "script to make those targets visible to me.\n"
		Msg n 9 "Run \"bogo help staging\" for more information\n"
	fi
	
	if [[ $stage_fail == true ]]; then
		echo -ne "Failure reported during pre-staging - aborting operation\n"
		return 1
	fi
	
	# If we dont have targets, but an external pre-stage was executed,
	# check to see if pre-staging made targets available
	if [[ ! -z $prestage_go ]] && [[ $flag_recheck == "true" ]]; then
		Banner "Rechecking target files"
		good=0
		bad=0
		num_strains=0
		str=0
		target_nogo=0
		total_targs=0
		unset targets_go
		unset target_strains
		unset allies_go
		unset strains_go
		for file in $BOGO_TARGETS_DIR/*; do
			ParseTargetFile $file
		done
	fi
	
	Banner "Confirming targets"
	
	# Make sure we still have targets
	if [[ -z $targets_go ]]; then
		Msg err 4 "No targets to hit - aborting operation\n"
		return 1
	fi
	
	# Some sanity checks for the target
	skipped=0 # Be cute and count how many are wrong
	for i in ${targets_go[@]}; do
		ArrayHasValue $i ${allies_go[@]}
		if [[ $? == 0 ]]; then
			Msg err 4 "Target $i is also defined as an ally"
			Msg n 8 "Check your target and ally files for duplicate entries\n"
			((skipped++))
		elif [[ -e $ZHS_BASE/$i ]]; then
			Msg err 4 "Target $i exists in ZPD!"
		elif [[ ! -r $i ]]; then
			Msg err 4 "Target $i is unreadable"
			Msg n 8 "Infection will fail unless this is accounted for during staging"
		elif [[ ! -w $i ]]; then
			Msg err 4 "Target $i is unwritable"
			Msg n 8 "Infection will fail unless this is accounted for during staging"
		fi
	done
	echo -ne "    \\tPath\\t\\t\\tStrain\\t\n"
	local x=1
	local y=0
	local broken=0
	for iz in ${targets_go[@]}; do
		echo -ne "    $x\\t"
		echo -ne "$iz\\t"
		
		# In the form of "target|strain"
		targ=${target_strains[$y]%|*}
		strain=${target_strains[$y]#*|}
		
		if [[ ! -e $BOGO_TARGETS_DIR/$targ ]]; then
			Msg err 4 "BUG: Aah! $targ is not a target!"
			Bug UserHit 1076
		fi
		
		if [[ ! -e $BOGO_STRAINS_DIR/$strain ]]; then
			Msg err 4 "BUG: Aah! $strain is not a strain!"
			Bug UserHit 1081
		fi
		
		# Find out which target file the target came from
		if [[ $(cat $BOGO_TARGETS_DIR/$targ | grep $iz) ]]; then
			echo -ne "$strain"
			SourceStrain $strain
			if [[ $? != 0 ]]; then
				# Dont use Msg, this needs to be on the same line
				echo -ne " [!] Where the fuck is the strain file??"
				((broken++))
			elif [[ ! -e $BOGO_STRAINS_DIR/$StrainAlias ]]; then
				echo -ne " [!] BROKEN: Payload not found"
				((broken++))
			fi
		else
			Msg err 0 "BUG: Aah! $iz is not in $targ!!"
			Bug UserHit 1025
		fi
		((y++))
		echo -ne "\n"
		((x++))
	done
	echo -ne "\n"
	if [[ $skipped != 0 ]]; then
		Error warn "There are $skipped conflicting targets."
		return 1
	fi
	
	if [[ $broken != 0 ]]; then
		echo "Aborting hit operation - one or more strains are broken"
		return 1
	fi
	
	Banner "Ready to hit $bad target(s)."
	Msg n 3 "Check that the above output looks sane before continuing."
	Msg n 3 "ONCE THE INFECTION PROCESS STARTS, IT CANNOT BE UNDONE!"
	Msg n 3 "Press ENTER to continue, or CONTROL + C to abort."
	read ab
	
	local cnt=0
	for i in ${targets_go[@]}; do
		targ=${target_strains[$cnt]%|*}
		strain=${target_strains[$cnt]#*|}
		
		if [[ $(cat $BOGO_TARGETS_DIR/$targ | grep $i) ]]; then
			((cnt++))
			Banner " $cnt/${#targets_go[@]}  ::  $i"
			HitStage $i $strain
			case $? in
				1)
					Msg n 4 "INFECTION FAILED";;
				2)
					Msg n 4 "INFECTION FAILED - ABORTING";;
				0)
					Msg n 4 "Infection successful";;
				*)
					Msg n 4 "BUG: BAD RETURN FROM HITSTAGE: $?"
					Bug UserHit 1128;;
			esac
		fi
	done
	
}

Bug()
{
	echo -ne "\n\nWelp, I totally fucked something up somewhere.\n\n"
	echo "   Faulting method:   $1($2)"
	echo ""
	echo "   num_strains:       $num_strains"
	echo "   str:               $str"
	echo "   target_nogo:       $target_nogo"
	echo "   total_targs:       $total_targs"
	echo "   bad:               $bad"
	echo "   good:              $good"
	echo ""
	echo "   x.y:               $x.$y"
	echo ""
	echo "   strain:            $strain"
	echo "   targ:              $targ"
	echo ""
	echo "   stage_fail:        $stage_fail"
	echo "   flag_recheck:      $flag_recheck"
	echo ""       
	echo "   targets_go[]:      ${targets_go[*]}"
	echo "   strains_go[]:      ${strains_go[*]}"
	echo "   allies_go[]:       ${allies_go[*]}"
	echo "   target_strains[]:  ${target_strains[*]}"
	echo "   unbuilt_strains[]: ${unbuilt_strains[*]}"
	echo ""
	echo "   StrainAlias:       $StrainAlias"
	echo "   WildeIsSavage:     $WildeIsSavage"
	echo "   ModInclude:        ${ModInclude[*]}"
	echo "   Payload:           $Payload"
	echo "   RequireStaging:    $RequireStaging"
	echo "   StagingFile:       $StagingFile"
	echo ""
	exit 1
}

UserCheck()
{
	case $1 in
		targets)
			Banner "Listing targets"
			for file in $BOGO_TARGETS_DIR/*; do
				ParseTargetFile $file
			done
			echo "${#targets_go[@]} out of $total_targs targets are accessible"
			;;
		strain-config)
			if [[ -z $2 ]]; then
				echo "Give me a specific strain to check its config"
				return 1
			elif [[ ! -e $BOGO_STRAINS_DIR/$2 ]]; then
				echo "I can't find $2 in the strains directory."
				if [[ "$2" != *".strain" ]]; then
					echo "Try including \".strain\" in the name"
				fi
				return 2
			fi
			Banner "Reading configuration of $2"
			SourceStrain $2
			echo ""
			while IFS='' read -r line || [[ -n "$line" ]]; do
				Msg n 4 "$line"
			done < $BOGO_STRAINS_DIR/$2
			echo ""
			StrainConfigCheck $2
			if [[ $? != 0 ]]; then
				echo -ne "\nErrors reported in strain config\n\n"
			else
				echo -ne "\nConfig looks good\n\n"
			fi
			StrainPurgeConfig
			;;
		*)
			echo "Check what?"
			echo "Targets accessability?  -> bogo check targets"
			echo "Test a strain file?     -> bogo check strain-config strainname.strain"
			;;
	esac
}

UserBuild()
{
	if [[ -z $1 ]]; then
		echo "Build what?"
		echo "Specify a strain file, or say \"all\" to build everything in the"
		echo -ne "strains directory.\n\n"
		return 1
	fi
	
	if [[ $1 == "all" ]] || [[ $1 == "everything" ]]; then
		if [[ ! $(ls $BOGO_STRAINS_DIR | grep .strain) ]]; then
			Error warn "There are no strain files in the strains directory"
			return 1
		fi
		ParseStrain
		return 0
	fi
	
	if [[ ! -e $BOGO_STRAINS_DIR/$1 ]]; then
		Error warn "\"$1\" does not exist in the strains directory"
		Msg n 9 "Run \"bogo list strains\" for a list of strains\n"
		return 0
	else
		StrainBuild $1
		if [[ $? != 0 ]]; then
			Error warn "StrainBuild failed for $1??"
			Bug UserBuild 936
		fi
	fi
	
	if [[ $? == 69 ]]; then
		Error warn "\"$1\" is not a valid strain of wilde"
		Msg n 9 "Run \"bogo help\" to learn how to create strain files"
	fi
	
}

HelpThorough()
{
	case $1 in
	"strains")
	echo "
   
	";;
	"hit")
	echo "
   bogo hit [option]
   Where [option] can be:
      all              Hit all targets listed in all target files 
                       in the targets directory.
                       
      <target file>    Hit only the targets listed in a specific
                       target file. If the target file is outside
                       the targets directory, give its full path.
                       
      <target name>    Hit only a single specific target. I'll figure
                       out which target file its located in, and use the
                       strain given in that file.
   
   A TARGET is a user, file, or directory that you want me to hit.
   
   To HIT means to infect a target or targets with a strain.
   
   A TARGET FILE is a text file containing a list of targets you
   want me to infect, one target per line.
   Somewhere in this file should be line the \"UseStrain=x\", with x
   being the strainfile you want me to use to infect these targets.
   (I recommend it being the first line of the file, but I really dont care
   as long as its there.)
   
   Target files are in the form \"targets_x.bogo\", with x being whatever
   name you want. I will IGNORE any file that does not follow this convention.
   
   An ALLY is a user, file, or directory that you DONT want me to infect
   with a strain of wilde. 
	";;
	
	"wilde")
	echo "
   I refer to any payload or script that you want to be executed under my 
   direction as \"wilde\".
";;
	"edit")
	echo "
   bogo edit [strainfile] [parameter] [value]
   
      [strainfile] is the full name of the strain file you want to edit.
                   It must be in the strains directory for me to find it
                   
      [parameter]  is the variable you want to change.
                   For example, \"StrainAlias\". Dont include the equals
                   sign. If its not in the strain file, dont worry, I'll
                   add it in.

      [value]      is what you want me to set the parameter to.
                   Again, no equals sign is needed.
	               
   Example: change parameter StrainAlias in test.strain to \"test\"
      bogo edit test.strain StrainAlias test
               
   ";;
	*)
	echo "
   My name is Chief Bogo, and I manage the execution and distribution
   of strains to infect specific targets.
   
   For specifics, run the following:
      bogo help strains   info on writing and building strains
      bogo help hit       info on hitting targets and target files
      bogo help staging   info on staging and staging files
      bogo help setup     info on setting up and executing
   
";;
	esac
}
if [[ ! -e zpd.subr ]]; then
	echo "zpd.subr is missing."
	echo "It should be the same directory as me"
	exit 99
fi

if [[ ! -e global.cfg ]]; then
	echo "global.cfg is missing."
	echo "It should be the same directory as me"
	exit 99
fi
	
source zpd.subr
SourceGlobal
if [[ $PWD != $ZHS_BASE ]]; then
	cd $ZHS_BASE
fi
Header BOGO2
IAmGroot
if [[ $? == 0 ]]; then
	echo -ne "Running with root credentials\n\n"
fi
BogoCheckConfig
if [[ $? != 0 ]]; then
	echo ""
	Error fatal "Errors in configuration - can't continue"
fi
if [[ -e _bogo.tmp ]] && [[ ! -w _bogo.tmp ]]; then
	rm -f _bogo.tmp
	Error warn "Corrected permissions for scratch file."
	Msg n 9 "Previous execution was probably done as root."
	Msg n 9 "If this was the case, you might run into issues"
	Msg n 9 "with permissions.\n"
fi
Replace _bogo.tmp

case $1 in
	hit) UserHit $2;;
	check) UserCheck $2 $3;;
	build) UserBuild $2;;
	edit) UserEdit $2 $3 $4;;
	list) UserList $2;;
	help) HelpThorough $2;;
	*) echo "Chief Bogo, awaiting orders!"
	   HelpBrief;;
esac
