#!/bin/bash
#
# Shared subroutines used by members of the zhs
# If a function is used by more than one member, it should be here
#

Header()
{
	clear
	echo -ne "$1 $VERSION\n\n"
}

Banner()
# Fancy banner
{
	echo ":: $1 "
}

Msg()
# Message output with appropriate spacing
{
	type=$1
	spacing=$2
	message=$3
	local i=0
	while [[ $i -lt $spacing ]]; do
		echo -ne " "
		((i++))
	done
	
	case $1 in
		"err")
			echo -ne "[!] $message\n";;
		"lst")
			echo -ne " -  $message\n";;
		"log")
			echo -ne "LOG: $message\n";;
		*)
			echo -ne "$message\n";;
	esac
}

Error()
# Print an error messaage
{
	case "$1" in
		"warn") echo "WARNING: $2";;
		"fatal") echo "FATAL: $2"
				 echo -ne "\nABORTING\n"
				 exit 1;;
		"note") echo "NOTE: $2";;
		"log") echo "LOG: $2";;
		*) echo -ne "\nBUG: Errorception \n1: $1 \n2: $2\n"
			 exit 69;;
	esac
}

CheckConfigPaths()
# Check that the paths in configuration exist
{
	local e=0
	while IFS='' read -r line || [[ -n "$line" ]]; do
		if [[ -d $line ]]; then
			PathCheck $line
			if [[ $? != 0 ]]; then
				((++e))
			fi
		fi
	done < "$1"
	if [[ $e != 0 ]]; then
		return 1
	fi
	return 0
}

PathCheck()
# Return 0 if path exists
{
	if [[ ! -e $1 ]]; then
		#Error warn "Missing $1"
		return 1
	elif [[ ! -r $1 ]]; then
		#Error warn "$1 exists but cannot be read"
		return 2
	else
		#echo "Found $1"
		return 0
	fi
}

IAmGroot()
# Return 0 if we are (g)root
{
	if [[ $EUID -ne 0 ]]; then
		return $EUID
	else
		return 0
	fi
}

SourceGlobal()
{
	local path=""
	if [[ -f $1 ]]; then
		path=$1
	else
		path=$PWD/global.cfg
	fi
	
	if [[ ! -e $path ]]; then
		Error warn "Global config does not exist in $path"
		return 1
	else
		source $path
	fi
}

CountFiles()
# Count the number of files in a directory
{
	local x=$(ls -ld $1/* | wc -l)
	return $x
}

ArrayHasValue()
# Return 1 if array $2 contains $1
{
	local i t="$1"
	shift
	for i; do 
		[[ "$i" == "$t" ]] && return 0; 
	done
	return 1
}

Prompt()
{
	local x=false
	while [[ !x ]]; do
		read a
	done
}

Replace()
# If file exists, delete it before recreating it.
{
	if [[ -e $1 ]]; then
		rm -f $1
	fi
	touch $1
}
